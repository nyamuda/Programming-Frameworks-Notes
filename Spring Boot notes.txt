Java spring book

1. CONTROLLERS - @getmapping("/students")-route, @responsebody - return actual data not a view, 
@pathvariable("id")-->when passing in a parameter id e.g when route @getmapping("student/{id}") 
2. MIGRATIONS - models @component
/*
3. SERVICES - business logic @service
Its where you write the code for fetching data
you can the inject the service class, into the controller class, call the construct for it, and get to use its methods.
This where you do all the logic/calculatons on you data using the repository
*/
4. Models--- repository @repository, you inject it into the service, and can create methods and to use
the repository's methods to access the data.@query - make your own queries.
You can associate the repository with your class(Model) and that way it will provide you with methods
to access objects from your model.



table class + repository+service==Model in Laravel;



SPRING SECURITY

CONCEPTS
Auntentication -->who you are
Authorization -->what resourses you can access
Principal---> the person ou have identified through the process of authentication-->a currently logged in user.
Granted Authority-->is an individual privilege, examples could include READ_AUTHORITY, WRITE_PRIVILEGE,
we can use GRANTED authority by using an expression like hasAuthority(‘READ_AUTHORITY'),
we are restricting access in a fine-grained manner.
You can think of each GrantedAuthority as an individual privilege
Role--->you can think of it as a coarse-grained GrantedAuthority that is represented as a String and prefixed with “ROLE“.
When using a Role directly, such as through an expression like hasRole(“ADMIN”), 
we are restricting access in a coarse-grained manner.
Its like a group of GRANTED authorities.

AuthenticationManager --->is an interface that manages authentication. 
It only has one method-->authenticate() method-->  Authentication authenticate(Authentication authentication)
    throws AuthenticationException;
}

An AuthenticationManager can do one of 3 things in its authenticate() method:

1.Return an Authentication (normally with authenticated=true) if it can verify 
that the input represents a valid principal.
2.throw an AuthenticationException if it believes that the input represents an invalid principal.
3.throw a null.


So how do you work with the AuthenticationManager-->you don't work with it directly.
HOW?? 
You use the AuthenicationMangerBuilder class -->it allows you to CONFIGURE what the authentication() method should do.
With the builder you can configure what type of authentication you want.
So the builder will ask you-->
what type of authentication do you need? you could say IN MEMORY for example
then tell me the username, password, role of your in memory user.


So how do you get hold of this  AuthenicationMangerBuilder??

okay IN THE SPRING FRAMEWORK there is a class call WebSecurityConfigureAdapter
this class contains a method called --->configure
the configure method takes in the AuthenicationMangerBuilder a paramater.

THE SPRING FRAMEWORK USES THIS configure method to put in its default security settings.

THUS TO GET HOLD OF THE  AuthenicationMangerBuilder WE SHOULD INHERIT THE WebSecurityConfigureAdapter CLASS,
AND THEN OVERIDE the configure METHOD AND THIS WAY--->
WE CAN USE THE AuthenicationMangerBuilder and tell it what the authentication() method should do.


PASSWORD ENCODING
--->create a @bean of type PasswordEncorder
-->and when spring is  looking for all the avilable beans and if one of them is
of type PasswordEncorder, SPRING will expose the beam to security.
@bean
PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

--> then your configuration file you can inject the object of type BCryptPasswordEncoder,
-->private BCryptPasswordEncoder passwordEncoder;

-->and then pass it in the userDetailsService method--->
auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);



STEPS TO BULDING A FULL STACK APPLICATION

1. CREATE YOU MODELS e.g USER AND ROLE
2. CREATE THE REPOSITORY FOR YOUR MODELS -->interfaces
3. CREATE A USER SERVICE-->interface
define all the methods you will need in our application so that you can manage your users.
e.g methods like, saveuser,saverole,addroletouser(String username,String role),getUser(String username),getUsers

4.Create a class that implements the USERSERVICE interface-->inject the reposities to query the database 
@service,@transactional

5.Create your controller -->@Restontroller
private UserService userService;
inject the UserService in the controller. e.g to get all users--->
@GetMapping("/users")
public List<User> getUsers() {
return userService.getUsers; 
}

to save a user-->

@GetMapping("/user/save")
@PostMapping("/user/save")
    public ResponseEntity<MyUser> addUser(@RequestBody MyUser user) {
        return ResponseEntity.ok().body(userService.addUser(user));

    }

---> when you pass in the MyUser model as the type of your parameter---->
the data you get from the user side will be bound to to the object of your model

so the incoming data is bound to the object of the MyUser class;
you can then store that object && the data will be saved to the database
  
6. CREATE THE CONFIGURATION CLASS

 @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);
    }

7. CREATE A CLASS THAT OVERIDES THE USERDETAILS SERRVICE CLASS

USERDETAILSSERVICE
The UserDetailsService interface is used to retrieve user-related data. 
It has one method named loadUserByUsername() which can be overridden to customize 
the process of finding the user.
It is a core interface in Spring Security framework, which is used to retrieve 
the user's authentication and authorization information. 


Thus the USERDETAILSSERVICE is mainly used for authentication and authorization--->
we use to to retrieve user data and check if can be  authenticated or authorized

 public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        MyUser user = userRepo.findByUsername(username);
        if (user == null) {
            throw new UsernameNotFoundException("Incorrect credentials");
        }
        // creating an empty arrayList;
        Collection<SimpleGrantedAuthority> authorities = new ArrayList<>();
        // we loop through the roles of the user and convert each role name to a
        // SimpleGrantedAuthority;
        user.getRoles().forEach(role -> authorities.add(new SimpleGrantedAuthority(role.getRoleName())));
        return new User(user.getUsername(), user.getPassword(), authorities);
    }



8. Create  custom aunthentication filter class--->extends the UsernamePasswordAuthenticationFilter
overide 2 methods

1. attemptaunthentication
2.successful authentication

-->inject the authenticationManager--->we're going to be using it to authenticate the user.

--->‌inside the attemptauthentication method, grap the username and password
-->then create an authentication token out the username and password-->use the USERNAMEPASSWORDAUTHENTICATIONTOKEN class--->
UsernamePasswordAuthenticationToken token=new UsernamePasswordAuthenticationToken(username,passowrd);
-->Once you have the authentication token, then you can pass it in to the authenticationManager-->
return authenticationManager.authenticate(token);


****---->You can then add you custom filter in you the configuration class--->
http.addFilter(customAuthenticationFilter(argument))

--->now remember the constructor of our customAuthenticationilter takes in the authenticationManager as an argument-->
meaning we need to pass in the authenticationManager as our argument here -->http.addFilter(customAuthenticationFilter(argument))

so how do we get hold of the authenticationManager??

--> the WebSecurityConfigurerAdapter that we inherit already contains a method that returns the authenticationManager--->
so all we need to do is to overide this method and return the authenticationManager bean

--> @Override
@Bean
    protected AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }

--> http.addFilter(new CustomAuthenticationFilter(authenticationManagerBean()));



9.ADD THE JWT DEPENDECY


10. Deal with the successful authentication method in you customfilter

-->first get the information of the user that has been authenticated.
 User user = (User) authResult.getPrincipal();

-->then create a token for the user using JWT
  User user = (User) authResult.getPrincipal();
        long exp_time = 31556952000L;
        Algorithm algorithm = Algorithm.HMAC256("secret".getBytes());
        String access_token = JWT.create().withSubject(user.getUsername())
                .withExpiresAt(new Date(System.currentTimeMillis() + exp_time))
                .withIssuer(request.getRequestURI().toString())
                .withClaim("roles",
                        user.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList()))
                .sign(algorithm);

        Map<String, String> token = new HashMap<String, String>();
        token.put("access_token", access_token);
        response.setContentType(APPLICATION_JSON_VALUE);

        new ObjectMapper().writeValue(response.getOutputStream(), token);



11.USE THE TOKEN TO AUTHORIZE THE USER TO ACCESS ROSOURCES---> create a custom authorization filter
-->it extends the OncePerRRequestFilter-->it intercept every request that comes in our application.
-->overide the doFFilterInternal method
-->first check if the request is for the login page
-->if(request.getServletPath().equals("/login")) {
            filterChain.doFilter(request,response);
        }

else get the authorization header from the request
and check if the authorization header contains the the word "Bearer " and a space.
-->>why?
On the frondend, whenever a user is authenticated and we give them a token,
-->for every request to access a particular resource we are going to send
the token back to the server, we are going to send the word "Bearer {TOKEN}"
import static org.springframework.http.HttpHeaders.AUTHORIZATION;
authorizationHeader = request.getHeader(AUTHORIZATION);

   try {
                    String token = authorizationHeader.substring("Bearer ".length());
                    Algorithm algorithm = Algorithm.HMAC256("secret".getBytes());
                    JWTVerifier verifyToken = JWT.require(algorithm).build();
                    DecodedJWT decodedToken = verifyToken.verify(token);
                    String username = decodedToken.getSubject();
                    // get the roles as an array of string
                    String[] roles = decodedToken.getClaim("roles").asArray(String.class);
                    // makes a collection of SimpleGrantedAuthority
                    Collection<SimpleGrantedAuthority> authorities = new ArrayList<>();
                    // convert each role of type String to type SimpleGrantedAuthority
                    for (int i = 0; i < roles.length; i++) {
                        authorities.add(new SimpleGrantedAuthority(roles[i]));
                    }
                    // get the usernamepasswordauthentication token
                    UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(
                            username, null, authorities);

                    // give the SecurityContextHolder the details of the currently logged in user
                    // and let it determine what resources the user can access.
                    SecurityContextHolder.getContext().setAuthentication(authenticationToken);
                    filterChain.doFilter(request, response);
                }
                // if the token is invalid, we return an error message
                catch (Exception e) {
                    response.setHeader("error", e.getMessage());
                    Map<String, String> error = new HashMap<String, String>();
                    error.put("error_message", e.getMessage());
                    response.setContentType(APPLICATION_JSON_VALUE);

                    new ObjectMapper().writeValue(response.getOutputStream(), error);
                }

-->The most fundamental object is the SecurityContextHolder.

-->This is where we store details of the present security context of the application, 
which includes details of the principal currently using the application. 
So Spring is going to look at the user, look at their role and determine what rosourses they can access






 



1. Create SECURITY FOLDER
a. Create  SecurityConfigure File-->






//notes
Posts Entity
  @ManyToOne
@JoinColumn(name="user_id")
    private User user; --->many side of the relationship. A foreign key user_id is created on the the Posts table.

-->This way for every post object we will also get the user_id


Users Entity
@OneToMany(mappedBy="user")
    private List<Term> posts;---> one many side of the relationship
--> This way for every user object we fetch, we will also get the a list of posts under that user;


**Add the MappedBy attribute to the OneToMany annotation. The attribute is used to tell the
annotation that the relationship has already been handled and to use the foreign key in
the corresponding table. In this way, an additional table is not created -->USERS-POSTS table. 



**For MySQL to recognise the foreign key(user_id) created in the the posts entity when you insert data into it -->
you first need to specificy the actual name of this foreign column. -->
We use the @JoinColumn annotation
-->The @JoinColumn annotation defines that actual physical mapping on the owning side(owns the foreign key)





QUERYING

The code for querying a book with index parameters using JPQL is this.

1.JPQL
@Query("SELECT b FROM Book b WHERE b.title = ?1 and b.author = ?2")
Book findBookByTitleAndAuthorIndexJpql(String title, String authorName);
In the preceding code, the title method parameter will be assigned to the 
query parameter with index 1. Similarly, authorName will be assigned to the query parameter with index 2.


2. Using native code
@Query(
  value = "SELECT * FROM Users u WHERE u.status = ?1", 
  nativeQuery = true)
User findUserByStatusNative(Integer status);


3.Using named parameters
@Query("SELECT u FROM User u WHERE u.status = :status and u.name = :name")
User findUserByStatusAndNameNamedParams(
  @Param("status") Integer status, 
  @Param("name") String name);




**when you have a many to many relationship, add to the @jsonignore annotation to avoid getting nested object results.

many-to many relationship undirectional relationship--> add the following to one of the entities

on the student entity
  @JsonIgnore
 @ManyToMany(cascade = CascadeType.ALL)
    @JoinTable(name = "student_department", joinColumns = { @JoinColumn(name = "student_id") }, inverseJoinColumns = {
            @JoinColumn(name = "department_id") })
    private Set<Department> department = new HashSet<Department>();



//SENDING JSON DATA

send you data in this way
{
  "username":"chem",
    "firstName":"pierce",
    "secondName":"nyamuda",
    "password":"helloworld",
    "curriculum":{
        "id":1
    }
}

the user model has one one of the properties

private Curriculum curriculum;

when you send the JSON data the curriculum object(FROM THE JSON) is going to be bound to the
curriculum model--->meaning we can use the getId getter from the curriculum model to get the id
from the JSON.



///CORS SETTINGS
 http.cors().configurationSource(request -> {
            CorsConfiguration cors = new CorsConfiguration();
            cors.setAllowedOrigins(List.of("*"));
            cors.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));
            cors.setAllowedHeaders(List.of("*"));
            return cors;
        });




EXCEPTION HANDLING

1. Create an Error details class ---> e.g
public class ErrorDetails {
    private ZonedDateTime timestamp;
    private String message;
    private String details;

2. Create an API Exception class--->
public class ApiException extends RuntimeException {

    public ApiException(String message) {
        super(message);
    }
}

3. Create a global exception handler

@ControllerAdvice
public class GlobalExceptionHandler {
   // handle validation exception
    @ExceptionHandler(MethodArgumentNotValidException.class)
    private ResponseEntity<Object> handleNotFound(MethodArgumentNotValidException ex) {

        Map<String, String> validationError = new HashMap<>();
        validationError.put("error", ex.getAllErrors().get(0).getDefaultMessage());

        return new ResponseEntity<Object>(validationError, HttpStatus.BAD_REQUEST);
    }


    // handle api exception
    @ExceptionHandler(ApiException.class)
    private ResponseEntity<Object> handleAPIException(ApiException ex, WebRequest request) {
        ErrorDetails errorDetails = new ErrorDetails(ZonedDateTime.now(), ex.getLocalizedMessage(),
                request.getDescription(false));

        return new ResponseEntity<Object>(errorDetails, HttpStatus.NOT_FOUND);
    }

    // handle global exceptions

}


A RESTful API for A 'Level physics and chemistry students.

RUN SPRING BOOT FROM THE TERMINAL mvn spring-boot:run
axios with Quasar const axios = require("axios");
